
# 0-add_integer.txt

==========================================================================
doctest to test 0-add_integer.py
==========================================================================

Two arguments (both numbers)
==========================================================================

        >>> add = __import__('0-add_integer').add_integer
        >>> add(2, 3)
        5
        >>> add(4, -5)
        -1
        >>> add(-6.2, 4)
        -2
        >>> add(-5, 0)
        -5

One argument (number)
==========================================================================

        >>> add(12)
        110
        >>> add(5.5)
        103
        >>> add(0)
        98


Non-number types as arguments
==========================================================================

        >>> add('c', 'd')
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
          File "/home/leulyk/Documents/git-repos/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 20, in add_integer
            raise TypeError("a must be an integer")
        TypeError: a must be an integer
        >>> add('c')
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
          File "/home/leulyk/Documents/git-repos/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 20, in add_integer
            raise TypeError("a must be an integer")
        TypeError: a must be an integer
        >>> add(4, 'b')
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
          File "/home/leulyk/Documents/git-repos/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 22, in add_integer
            raise TypeError("b must be an integer")
        TypeError: b must be an integer
        >>> add((1, 2, 3))
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
          File "/home/leulyk/Documents/git-repos/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 20, in add_integer
            raise TypeError("a must be an integer")
        TypeError: a must be an integer

Overflows and special values in float
==========================================================================

        >>> add(float('nan'))
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
          File "/home/leulyk/Documents/git-repos/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 23, in add_integer
            return int(a) + int(b)
        ValueError: cannot convert float NaN to integer
        >>> add(float('inf'))
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
          File "/home/leulyk/Documents/git-repos/alx/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 23, in add_integer
            return int(a) + int(b)
        OverflowError: cannot convert float infinity to integer

